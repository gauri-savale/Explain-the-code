Q1. Complex Recurrence (trace carefully)
def h(n):
if n <= 1:
return 1
return h(n-1) + h(n-3)
print(h(6))
Task: Compute h(6) with explanation.

Q2. Generator with send()
def gen():
x = 0
while True:
received = (yield x)
if received:
x += received
else:
x += 1
g = gen()
print(next(g))
print(g.send(5))
print(next(g))
Task: Explain sequence of yielded values and effects of send.

Q3. Two-sum with dict nuance
def two_sum(nums, target):
seen = {}
for i, x in enumerate(nums):
if target - x in seen:
return (seen[target - x], i)
seen[x] = i
print(two_sum([2,7,11,15], 9))
Task: Explain why this returns indices efficiently.
