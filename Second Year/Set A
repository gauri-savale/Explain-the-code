Q1. Implement Stack (DSA)
Task: Implement a stack using list with push, pop, peek operations.
Code:
class Stack:
    def __init__(self):
        self.stack=[]
    def push(self, val):
        self.stack.append(val)
    def pop(self):
        return self.stack.pop() if self.stack else "Stack Empty"
    def peek(self):
        return self.stack[-1] if self.stack else "Stack Empty"
s=Stack()
s.push(10); s.push(20)
print("Top:", s.peek())
print("Pop:", s.pop())
print("Top:", s.peek())


Q2. In-place List Modification During Iteration
nums = [1,2,3,4,5]
for i, v in enumerate(nums):
if v % 2 == 0:
nums.pop(i)
print(nums)
Task: Explain final contents and why.

Q3. BFS Level Order and Mutation
from collections import deque
G = {1:[2,3], 2:[4], 3:[5], 4:[], 5:[]}
q = deque([1])
visited = []
while q:
u = q.popleft()
visited.append(u)
for v in G[u]:
if v not in visited and v not in q:
q.append(v)
print(visited)
Task: Explain the traversal order and how duplicates are avoided.
